function [f,tau]=d_mesa(x)
%[f,tau]=d_mesa(x)
%
%    d_mesa, dusty's mesa adapted by pf'00 from joelmes.for
%    x: data ... a COLUMN vector , or many
%
%     subroutine to generate maximum entropy prediction
%
%
nsamps=length(x);
%% functions lopass and detren are defined below
x=detren(x);
x=lopass(x);
ncoef = nsamps/2;
%
%
mfpe=0.0;
mfl =  30; 
b=x;
p=dot(x,x);

p=p/nsamps;
fpe=(nsamps+1)/(nsamps-1)*p;
ftemp = fpe;
fpe=0.0;
ao=zeros(size(x));
a=ao;
a(1)=-1;
ao(1)=-1;
nn=ncoef-1;

for m=1:nn
  nmm=nsamps-m;
  i=1:nmm;    
  xx=x(i)-a(m)*b(i);
  b(i)=b(i+1)-a(m)*x(i+1);
  x(i)=xx;
 
  nom=dot(x(i),b(i));
  denom=dot(x(i),x(i))+dot(b(i),b(i));
  
  a(m+1)=2*nom/denom;
  p=p*(1-a(m+1)*a(m+1));
  no=nsamps/2;
  if (~(m == 1 | m >= no))
    fpe=(nsamps+m)/(nsamps-m)*p;
    fpe=fpe/ftemp;
    fpe=log10(fpe);
  end
  if (~(m==1))
    i=2:m;
    ao(i)=a(i)-a(m+1)*a(m+2-i);
    i=2:m;  
    a(i)=ao(i);
  end
  ao(m+1)=a(m+1);
  if (m==mfl)   
    lfilt=m+1;
    mfpe=fpe;
    po = p;
    j=1:lfilt;
    best=ao(j);
  end
end

ncoef=lfilt;
a(1) = -1;

i=1:ncoef;
best(i)=-best(i);

fmin=2.0/(nsamps);
fmax=0.5;
[f,tau]=mesa(fmin,fmax,nsamps,ncoef,po,best);


function z=detren(y)
n=length(y);
x=(1:n)';
[m,b]=slope(x,y);
z=y-m*x-b;

function y=lopass(x)
a=[ 3.414213, 4.768372e-7, 0.5857863];
b=[1 2 1 ];
z=[(a(1)-b(1))*x(1)/a(1), ...
   ((a(1)-b(1))*x(2)+(a(2)-b(2))*x(1))/ a(1)];
y=filter(b,a,x,z);

function [f,tau]=mesa(fmin,fmax,nsamps,ncoef,po,best)
%
%     subroutine to compute samples of a mesa spectrum from a
%     prediction error filter
%
%     fmin,fmax   the range of frequencies to compute
%     (cycles per sample)
%     f  a real array at least nsamps long to contain
%     the sampled frequency values.
%     nsamps       the number of frequency values to compute
%     a  a real array of prediciton error filter coefficients
%     ncoef        the number of coefficients in the prediction error
%     filter.  the first coefficient is always one in a prediction
%     error filter.
%     p  the output power of the prediction error filter.

pi2=6.2831830717959;
f=zeros(1,nsamps);
tau=zeros(1,nsamps);
i=(1:nsamps)';
freq=fmin+(i-1).*(fmax-fmin)/(nsamps-1);
tau=1./freq;
j=1:ncoef; 

omega=-pi2*freq*j;

ream=cos(omega)*best(j);
imag=sin(omega)*best(j);
f=po./(ream.^2+imag.^2)./10;
